package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
)

// —Å–æ–∑–¥–∞—ë–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–∏–ø –∫–ª—é—á–∞
type ctxKey string

const userIDKey ctxKey = "userID"

// middleware –¥–æ–±–∞–≤–ª—è–µ—Ç userID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
func authMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// –¥–æ–ø—É—Å—Ç–∏–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ ID = 42
		ctx := context.WithValue(r.Context(), userIDKey, 42)

		// –ø–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–ª—å—à–µ
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∏–∑–≤–ª–µ–∫–∞—é—â–∏–π userID –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
func handler(w http.ResponseWriter, r *http.Request) {
	userID := r.Context().Value(userIDKey)

	if userID != nil {
		fmt.Fprintf(w, "üë§ Hello, user #%v!\n", userID)
		log.Println("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è userID:", userID)
	} else {
		http.Error(w, "üö´ No user ID", http.StatusUnauthorized)
	}
}

func main() {
	mux := http.NewServeMux()
	mux.Handle("/", authMiddleware(http.HandlerFunc(handler)))

	fmt.Println("üöÄ –°–ª—É—à–∞—é –Ω–∞ :8080")
	log.Fatal(http.ListenAndServe(":8080", mux))
}
